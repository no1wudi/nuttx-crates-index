# Copyright (c) 2025 Xiaomi Corporation
# SPDX-License-Identifier: Apache-2.0

name: Build

# Working directory layout after checkout:
# .
# ├── nuttx-crates-index/ (this repository)
# ├── nuttx/              (NuttX repository)
# ├── nuttx-apps/         (NuttX Apps repository)
# │   └── external/       (symbolic link to nuttx-crates-index)
# ├── output/             (Artifact directory)
# └── build/              (build directory)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
          - sabre-6quad

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: nuttx-crates-index

      - name: Checkout NuttX repository
        uses: actions/checkout@v4
        with:
          repository: apache/nuttx
          path: nuttx
          ref: e15f7b13c7ed16934d10018ac7f868df936797d3

      - name: Checkout NuttX Apps repository
        uses: actions/checkout@v4
        with:
          repository: apache/nuttx-apps
          path: nuttx-apps
          ref: 3b03636e95f6202b512d8af32629da4c0dc4af2c

      - name: Create symbolic link to external directory
        run: |
          cd nuttx-apps
          rm -rf external
          ln -sf ../nuttx-crates-index external

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y kconfig-frontends-nox gcc-arm-none-eabi qemu-system-arm cmake python-is-python3 ninja-build
          pip install kconfiglib --break-system-packages
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2025-03-07
          components: rustfmt,clippy,rust-src
          cache: false
          override: true

      - name: Patch Rust std library
        run: |
          RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs"
          echo "Patching file: $RUST_SRC_PATH"
          sed -i 's/unsafe { CStr::from_ptr(self\.entry\.d_name\.as_ptr()) }/unsafe { CStr::from_ptr(self.entry.d_name.as_ptr() as *const u8) }/g' "$RUST_SRC_PATH"
          echo "Patch applied successfully"

      - name: Create output directory
        run: mkdir -p output

      - name: Turnstyle
        uses: softprops/turnstyle@v2
        if: github.ref == 'refs/heads/main'

      - name: Build NuttX
        run: |
          python3 nuttx-crates-index/tools/build.py ${{ matrix.board }} --json output/${{ matrix.board }}.json

      - name: Save output cache
        uses: actions/cache/save@v4
        with:
          path: output/${{ matrix.board }}.json
          key: output-${{ matrix.board }}-${{ github.sha }}

  collect-outputs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create output directory
        run: mkdir -p merged-output

      - name: Restore individual output caches
        uses: actions/cache/restore@v4
        with:
          path: merged-output
          # This key is intentionally designed to never match,
          # forcing GitHub Actions to fall back to the restore-keys pattern
          key: dummy-cache-key-that-will-never-match
          # The restore-keys will match any cache key starting with 'output-'
          # allowing us to find all board-specific output caches
          restore-keys: |
            output-

      - name: Download all individual outputs
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const sha = context.sha;

            // Get the workflow file to extract board matrix dynamically
            const response = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '.github/workflows/build.yml',
              ref: sha
            });

            const content = Buffer.from(response.data.content, 'base64').toString();
            const workflow = yaml.parse(content);

            // Extract boards from the matrix configuration
            const boards = workflow.jobs.build.strategy.matrix.board || [];
            console.log('Detected boards:', boards);

            for (const board of boards) {
              const cacheKey = `output-${board}-${sha}`;
              const { cache } = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                key: cacheKey
              });

              if (cache.length > 0) {
                const cacheId = cache[0].id;
                console.log(`Found cache for ${board} with ID ${cacheId}`);

                // Download the cache
                await github.rest.actions.downloadActionsCacheEntry({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  key: cacheKey,
                  cacheId: cacheId
                });

                // Copy the file to the merged output directory
                if (fs.existsSync(`output/${board}.json`)) {
                  fs.copyFileSync(`output/${board}.json`, `merged-output/${board}.json`);
                  console.log(`Copied ${board}.json to merged output`);
                } else {
                  console.log(`Warning: ${board}.json not found`);
                }
              } else {
                console.log(`No cache found for ${board}`);
              }
            }

      - name: Save merged output cache
        uses: actions/cache/save@v4
        with:
          path: merged-output
          key: merged-outputs-${{ github.sha }}
