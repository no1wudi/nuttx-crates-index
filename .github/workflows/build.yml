# Copyright (c) 2025 Xiaomi Corporation
# SPDX-License-Identifier: Apache-2.0

name: Build

# Working directory layout after checkout:
# .
# ├── nuttx-crates-index/ (this repository)
# ├── nuttx/              (NuttX repository)
# ├── nuttx-apps/         (NuttX Apps repository)
# │   └── external/       (symbolic link to nuttx-crates-index)
# ├── output/             (Artifact directory)
# └── build/              (build directory)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.set-matrix.outputs.boards }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: nuttx-crates-index

      - name: Set matrix
        id: set-matrix
        run: |
          BOARDS=$(cat nuttx-crates-index/.github/boards.json | jq -c '{"board": .}')
          echo "boards=$BOARDS" >> $GITHUB_OUTPUT

  build:
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.boards) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: nuttx-crates-index

      - name: Checkout NuttX repository
        uses: actions/checkout@v4
        with:
          repository: apache/nuttx
          path: nuttx
          ref: e15f7b13c7ed16934d10018ac7f868df936797d3

      - name: Checkout NuttX Apps repository
        uses: actions/checkout@v4
        with:
          repository: apache/nuttx-apps
          path: nuttx-apps
          ref: 3b03636e95f6202b512d8af32629da4c0dc4af2c

      - name: Create symbolic link to external directory
        run: |
          cd nuttx-apps
          rm -rf external
          ln -sf ../nuttx-crates-index external

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y kconfig-frontends-nox gcc-arm-none-eabi qemu-system-arm cmake python-is-python3 ninja-build
          pip install kconfiglib --break-system-packages
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2025-03-07
          components: rustfmt,clippy,rust-src
          cache: false
          override: true

      - name: Patch Rust std library
        run: |
          RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/library/std/src/sys/pal/unix/fs.rs"
          echo "Patching file: $RUST_SRC_PATH"
          sed -i 's/unsafe { CStr::from_ptr(self\.entry\.d_name\.as_ptr()) }/unsafe { CStr::from_ptr(self.entry.d_name.as_ptr() as *const u8) }/g' "$RUST_SRC_PATH"
          echo "Patch applied successfully"

      - name: Create output directory
        run: mkdir -p output

      - name: Turnstyle
        uses: softprops/turnstyle@v2
        if: github.ref == 'refs/heads/main'

      - name: Build NuttX
        run: |
          python3 nuttx-crates-index/tools/build.py ${{ matrix.board }} --json output/${{ matrix.board }}.json

      - name: Save output cache
        uses: actions/cache/save@v4
        with:
          path: output/${{ matrix.board }}.json
          key: output-${{ matrix.board }}-${{ github.sha }}

  collect:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: nuttx-crates-index

      - name: Create output directory
        run: mkdir -p output

      - name: Collect all caches
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const boards = JSON.parse(
              fs.readFileSync('nuttx-crates-index/.github/boards.json', 'utf8')
            );

            for (const board of boards) {
              const cache = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                key: `output-${board}-${context.sha}`
              });

              if (cache.data.actions_caches.length > 0) {
                const cacheId = cache.data.actions_caches[0].id;
                await github.rest.actions.downloadActionsCacheArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cacheId
                });
              }
            }

      - name: Save combined cache
        uses: actions/cache/save@v4
        with:
          path: output
          key: output-combined-${{ github.sha }}

      - name: Compress outputs
        run: zip -r output.zip output/

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: combined-outputs
          path: output.zip
          retention-days: 7
